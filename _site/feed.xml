<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-27T09:27:17-05:00</updated><id>http://localhost:4000/</id><title type="html">Amir Asiaee</title><subtitle>Personal website and blog. </subtitle><author><name>Amir Asiaee</name><email>asiaeetaheri.1@osu.edu</email></author><entry><title type="html">Gender Pay Gap, Why?</title><link href="http://localhost:4000/dailyreport/elastic-net-intuition/" rel="alternate" type="text/html" title="Gender Pay Gap, Why?" /><published>2018-01-22T00:00:00-05:00</published><updated>2018-01-22T00:00:00-05:00</updated><id>http://localhost:4000/dailyreport/elastic-net-intuition</id><content type="html" xml:base="http://localhost:4000/dailyreport/elastic-net-intuition/">&lt;p&gt;I’m fortunate to be a postdoc at the &lt;a href=&quot;https://mbi.osu.edu/&quot;&gt;MBI&lt;/a&gt; instead of a member of a regular lab. 
&lt;!-- more --&gt; 
Here, there is a well-defined agenda for preparing and helping the postdocs to enter the job market. 
&lt;strong&gt;Professional development seminar&lt;/strong&gt; is an essential part of this preparation process.&lt;/p&gt;

&lt;h1 id=&quot;major-lessons&quot;&gt;Major Lessons&lt;/h1&gt;
&lt;p&gt;During the recent seminar, MBI latest &lt;strong&gt;Early career awardees&lt;/strong&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Pamela Pyzza and Megan Powell shared their experience of getting academic jab. The discussion was very helpful in many ways, an interesting one was the negotiation for the startup fund and all other financial details of the offer, e.g., relocation reimbursement, travel fund etc.&lt;/p&gt;

&lt;p&gt;Both awardees was emphasizing on strong early negotiation and then Megan mentioned something like “it seems that one of the reasons that the gender pay gap exist, is that women are not negotiating tough enough.”.
I was very happy to see that this idea has spread.&lt;/p&gt;

&lt;p&gt;I’m following the gender pay gap topic (and all other “(non)equality of outcome” claims)  closely and one of the best explanation that I’ve heard is from Professor &lt;a href=&quot;https://jordanbpeterson.com/&quot;&gt;Jordan B. Peterson&lt;/a&gt;, whom I admire. 
He is explaining the gap as a consequence of women on average being more agreeable than men. (of course this one of the many factors.) Agreeableness is one of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Five_personality_traits&quot;&gt;BIG 5&lt;/a&gt; personality trait that is very well-studied in psychology. Men and women (on average) are very different along agreeableness dimension. The evolutionary argument for this is that, women have been evolved to care for infants and agreeableness has helped them to climb up their dominance hierarchy. Now that they are fighting their way in the male dominance hierarchy, this trait (at least in this context) is not helpful, and they need to learn to become dis-agreeable.&lt;/p&gt;

&lt;p&gt;Coincidentally, JBP had an interview a few days ago on Channel 4 (in UK) where these ideas came up. The interview got attention for a certain “Ha! Gotcha!” moment. He stayed rational, consistent, and calm during a heated interview and went offense (to prove a point on free speech) and made the interviewer speechless for a minute.&lt;/p&gt;

&lt;p&gt;Here is the Youtube video of the interview where he talks about his recent book and answer a wide range of question, including the pay gap:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/watch?v=aMcjxSThD54&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://mbi.osu.edu/participate/early-career-award/&quot;&gt;Early career award&lt;/a&gt; is another wonderful opportunity provided by MBI. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Amir Asiaee</name><email>asiaeetaheri.1@osu.edu</email></author><category term="ProfessionalDevelopement" /><category term="JordanBPeterson" /><summary type="html">I’m fortunate to be a postdoc at the MBI instead of a member of a regular lab. Here, there is a well-defined agenda for preparing and helping the postdocs to enter the job market. Professional development seminar is an essential part of this preparation process. Major Lessons During the recent seminar, MBI latest Early career awardees1 Pamela Pyzza and Megan Powell shared their experience of getting academic jab. The discussion was very helpful in many ways, an interesting one was the negotiation for the startup fund and all other financial details of the offer, e.g., relocation reimbursement, travel fund etc. Both awardees was emphasizing on strong early negotiation and then Megan mentioned something like “it seems that one of the reasons that the gender pay gap exist, is that women are not negotiating tough enough.”. I was very happy to see that this idea has spread. I’m following the gender pay gap topic (and all other “(non)equality of outcome” claims) closely and one of the best explanation that I’ve heard is from Professor Jordan B. Peterson, whom I admire. He is explaining the gap as a consequence of women on average being more agreeable than men. (of course this one of the many factors.) Agreeableness is one of the BIG 5 personality trait that is very well-studied in psychology. Men and women (on average) are very different along agreeableness dimension. The evolutionary argument for this is that, women have been evolved to care for infants and agreeableness has helped them to climb up their dominance hierarchy. Now that they are fighting their way in the male dominance hierarchy, this trait (at least in this context) is not helpful, and they need to learn to become dis-agreeable. Coincidentally, JBP had an interview a few days ago on Channel 4 (in UK) where these ideas came up. The interview got attention for a certain “Ha! Gotcha!” moment. He stayed rational, consistent, and calm during a heated interview and went offense (to prove a point on free speech) and made the interviewer speechless for a minute. Here is the Youtube video of the interview where he talks about his recent book and answer a wide range of question, including the pay gap: Early career award is another wonderful opportunity provided by MBI. &amp;#8617;</summary></entry><entry><title type="html">Gender Pay Gap, Why?</title><link href="http://localhost:4000/dailyreport/gender-pay-gap/" rel="alternate" type="text/html" title="Gender Pay Gap, Why?" /><published>2018-01-19T00:00:00-05:00</published><updated>2018-01-19T00:00:00-05:00</updated><id>http://localhost:4000/dailyreport/gender-pay-gap</id><content type="html" xml:base="http://localhost:4000/dailyreport/gender-pay-gap/">&lt;p&gt;I’m fortunate to be a postdoc at the &lt;a href=&quot;https://mbi.osu.edu/&quot;&gt;MBI&lt;/a&gt; instead of a member of a regular lab. 
&lt;!-- more --&gt; 
Here, there is a well-defined agenda for preparing and helping the postdocs to enter the job market. 
&lt;strong&gt;Professional development seminar&lt;/strong&gt; is an essential part of this preparation process.&lt;/p&gt;

&lt;h1 id=&quot;major-lessons&quot;&gt;Major Lessons&lt;/h1&gt;
&lt;p&gt;During the recent seminar, MBI latest &lt;strong&gt;Early career awardees&lt;/strong&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Pamela Pyzza and Megan Powell shared their experience of getting academic jab. The discussion was very helpful in many ways, an interesting one was the negotiation for the startup fund and all other financial details of the offer, e.g., relocation reimbursement, travel fund etc.&lt;/p&gt;

&lt;p&gt;Both awardees was emphasizing on strong early negotiation and then Megan mentioned something like “it seems that one of the reasons that the gender pay gap exist, is that women are not negotiating tough enough.”.
I was very happy to see that this idea has spread.&lt;/p&gt;

&lt;p&gt;I’m following the gender pay gap topic (and all other “(non)equality of outcome” claims)  closely and one of the best explanation that I’ve heard is from Professor &lt;a href=&quot;https://jordanbpeterson.com/&quot;&gt;Jordan B. Peterson&lt;/a&gt;, whom I admire. 
He is explaining the gap as a consequence of women on average being more agreeable than men. (of course this one of the many factors.) Agreeableness is one of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Five_personality_traits&quot;&gt;BIG 5&lt;/a&gt; personality trait that is very well-studied in psychology. Men and women (on average) are very different along agreeableness dimension. The evolutionary argument for this is that, women have been evolved to care for infants and agreeableness has helped them to climb up their dominance hierarchy. Now that they are fighting their way in the male dominance hierarchy, this trait (at least in this context) is not helpful, and they need to learn to become dis-agreeable.&lt;/p&gt;

&lt;p&gt;Coincidentally, JBP had an interview a few days ago on Channel 4 (in UK) where these ideas came up. The interview gained attention for a certain “Ha! Gotcha!” moment. He stayed rational, consistent, and calm during a heated interview and went offense (to prove a point on free speech) and made the interviewer speechless for a minute.&lt;/p&gt;

&lt;p&gt;Here is the Youtube video of the interview where he talks about his recent book and answer a wide range of question, including equality of outcome vs. opportunity and the pay gap:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/aMcjxSThD54&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Cathy Newman, the interviewer, went against the argument of “difference in personality contributes to the pay gap” by proposing that we should make the work place &lt;strong&gt;less masculine&lt;/strong&gt; to which a Youtuber responded: “The feminist problem with equal treatment is that they are being treated like men.”!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://mbi.osu.edu/participate/early-career-award/&quot;&gt;Early career award&lt;/a&gt; is another wonderful opportunity provided by MBI. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Amir Asiaee</name><email>asiaeetaheri.1@osu.edu</email></author><category term="ProfessionalDevelopement" /><category term="JordanBPeterson" /><summary type="html">I’m fortunate to be a postdoc at the MBI instead of a member of a regular lab. Here, there is a well-defined agenda for preparing and helping the postdocs to enter the job market. Professional development seminar is an essential part of this preparation process. Major Lessons During the recent seminar, MBI latest Early career awardees1 Pamela Pyzza and Megan Powell shared their experience of getting academic jab. The discussion was very helpful in many ways, an interesting one was the negotiation for the startup fund and all other financial details of the offer, e.g., relocation reimbursement, travel fund etc. Both awardees was emphasizing on strong early negotiation and then Megan mentioned something like “it seems that one of the reasons that the gender pay gap exist, is that women are not negotiating tough enough.”. I was very happy to see that this idea has spread. I’m following the gender pay gap topic (and all other “(non)equality of outcome” claims) closely and one of the best explanation that I’ve heard is from Professor Jordan B. Peterson, whom I admire. He is explaining the gap as a consequence of women on average being more agreeable than men. (of course this one of the many factors.) Agreeableness is one of the BIG 5 personality trait that is very well-studied in psychology. Men and women (on average) are very different along agreeableness dimension. The evolutionary argument for this is that, women have been evolved to care for infants and agreeableness has helped them to climb up their dominance hierarchy. Now that they are fighting their way in the male dominance hierarchy, this trait (at least in this context) is not helpful, and they need to learn to become dis-agreeable. Coincidentally, JBP had an interview a few days ago on Channel 4 (in UK) where these ideas came up. The interview gained attention for a certain “Ha! Gotcha!” moment. He stayed rational, consistent, and calm during a heated interview and went offense (to prove a point on free speech) and made the interviewer speechless for a minute. Here is the Youtube video of the interview where he talks about his recent book and answer a wide range of question, including equality of outcome vs. opportunity and the pay gap: Cathy Newman, the interviewer, went against the argument of “difference in personality contributes to the pay gap” by proposing that we should make the work place less masculine to which a Youtuber responded: “The feminist problem with equal treatment is that they are being treated like men.”! Early career award is another wonderful opportunity provided by MBI. &amp;#8617;</summary></entry><entry><title type="html">Gender Pay Gap, Why?</title><link href="http://localhost:4000/dailyreport/gender-pay-gap-Copy-(2)/" rel="alternate" type="text/html" title="Gender Pay Gap, Why?" /><published>2018-01-19T00:00:00-05:00</published><updated>2018-01-19T00:00:00-05:00</updated><id>http://localhost:4000/dailyreport/gender-pay-gap%20-%20Copy%20(2)</id><content type="html" xml:base="http://localhost:4000/dailyreport/gender-pay-gap-Copy-(2)/">&lt;p&gt;I’m fortunate to be a postdoc at the &lt;a href=&quot;https://mbi.osu.edu/&quot;&gt;MBI&lt;/a&gt; instead of a member of a regular lab. 
&lt;!-- more --&gt; 
Here, there is a well-defined agenda for preparing and helping the postdocs to enter the job market. 
&lt;strong&gt;Professional development seminar&lt;/strong&gt; is an essential part of this preparation process.&lt;/p&gt;

&lt;h1 id=&quot;major-lessons&quot;&gt;Major Lessons&lt;/h1&gt;
&lt;p&gt;During the recent seminar, MBI latest &lt;strong&gt;Early career awardees&lt;/strong&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Pamela Pyzza and Megan Powell shared their experience of getting academic jab. The discussion was very helpful in many ways, an interesting one was the negotiation for the startup fund and all other financial details of the offer, e.g., relocation reimbursement, travel fund etc.&lt;/p&gt;

&lt;p&gt;Both awardees was emphasizing on strong early negotiation and then Megan mentioned something like “it seems that one of the reasons that the gender pay gap exist, is that women are not negotiating tough enough.”.
I was very happy to see that this idea has spread.&lt;/p&gt;

&lt;p&gt;I’m following the gender pay gap topic (and all other “(non)equality of outcome” claims)  closely and one of the best explanation that I’ve heard is from Professor &lt;a href=&quot;https://jordanbpeterson.com/&quot;&gt;Jordan B. Peterson&lt;/a&gt;, whom I admire. 
He is explaining the gap as a consequence of women on average being more agreeable than men. (of course this one of the many factors.) Agreeableness is one of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Five_personality_traits&quot;&gt;BIG 5&lt;/a&gt; personality trait that is very well-studied in psychology. Men and women (on average) are very different along agreeableness dimension. The evolutionary argument for this is that, women have been evolved to care for infants and agreeableness has helped them to climb up their dominance hierarchy. Now that they are fighting their way in the male dominance hierarchy, this trait (at least in this context) is not helpful, and they need to learn to become dis-agreeable.&lt;/p&gt;

&lt;p&gt;Coincidentally, JBP had an interview a few days ago on Channel 4 (in UK) where these ideas came up. The interview got attention for a certain “Ha! Gotcha!” moment. He stayed rational, consistent, and calm during a heated interview and went offense (to prove a point on free speech) and made the interviewer speechless for a minute.&lt;/p&gt;

&lt;p&gt;Here is the Youtube video of the interview where he talks about his recent book and answer a wide range of question, including the pay gap:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/watch?v=aMcjxSThD54&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://mbi.osu.edu/participate/early-career-award/&quot;&gt;Early career award&lt;/a&gt; is another wonderful opportunity provided by MBI. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Amir Asiaee</name><email>asiaeetaheri.1@osu.edu</email></author><category term="ProfessionalDevelopement" /><category term="JordanBPeterson" /><summary type="html">I’m fortunate to be a postdoc at the MBI instead of a member of a regular lab. Here, there is a well-defined agenda for preparing and helping the postdocs to enter the job market. Professional development seminar is an essential part of this preparation process. Major Lessons During the recent seminar, MBI latest Early career awardees1 Pamela Pyzza and Megan Powell shared their experience of getting academic jab. The discussion was very helpful in many ways, an interesting one was the negotiation for the startup fund and all other financial details of the offer, e.g., relocation reimbursement, travel fund etc. Both awardees was emphasizing on strong early negotiation and then Megan mentioned something like “it seems that one of the reasons that the gender pay gap exist, is that women are not negotiating tough enough.”. I was very happy to see that this idea has spread. I’m following the gender pay gap topic (and all other “(non)equality of outcome” claims) closely and one of the best explanation that I’ve heard is from Professor Jordan B. Peterson, whom I admire. He is explaining the gap as a consequence of women on average being more agreeable than men. (of course this one of the many factors.) Agreeableness is one of the BIG 5 personality trait that is very well-studied in psychology. Men and women (on average) are very different along agreeableness dimension. The evolutionary argument for this is that, women have been evolved to care for infants and agreeableness has helped them to climb up their dominance hierarchy. Now that they are fighting their way in the male dominance hierarchy, this trait (at least in this context) is not helpful, and they need to learn to become dis-agreeable. Coincidentally, JBP had an interview a few days ago on Channel 4 (in UK) where these ideas came up. The interview got attention for a certain “Ha! Gotcha!” moment. He stayed rational, consistent, and calm during a heated interview and went offense (to prove a point on free speech) and made the interviewer speechless for a minute. Here is the Youtube video of the interview where he talks about his recent book and answer a wide range of question, including the pay gap: Early career award is another wonderful opportunity provided by MBI. &amp;#8617;</summary></entry><entry><title type="html">Introducing the Jekyll-Scholar</title><link href="http://localhost:4000/dailyreport/jekyll-scholar/" rel="alternate" type="text/html" title="Introducing the Jekyll-Scholar" /><published>2018-01-18T00:00:00-05:00</published><updated>2018-01-18T00:00:00-05:00</updated><id>http://localhost:4000/dailyreport/jekyll-scholar</id><content type="html" xml:base="http://localhost:4000/dailyreport/jekyll-scholar/">&lt;h1 id=&quot;major-lessons&quot;&gt;Major Lessons&lt;/h1&gt;</content><author><name>Amir Asiaee</name><email>asiaeetaheri.1@osu.edu</email></author><category term="Jekyll" /><category term="Plugin" /><summary type="html">Major Lessons</summary></entry><entry><title type="html">The Curious Case of Ibrutinib-resistant CLL: Does Reverse-Mutations Exist? - Part I</title><link href="http://localhost:4000/dailyreport/cll-ibrutinib-resistence/" rel="alternate" type="text/html" title="The Curious Case of Ibrutinib-resistant CLL: Does Reverse-Mutations Exist? - Part I" /><published>2018-01-17T00:00:00-05:00</published><updated>2018-01-17T00:00:00-05:00</updated><id>http://localhost:4000/dailyreport/cll-ibrutinib-resistence</id><content type="html" xml:base="http://localhost:4000/dailyreport/cll-ibrutinib-resistence/">&lt;p&gt;This came up during our lab meeting today with my great postdoc mentor Professor Kevin Coombes. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;I asked a dumb question like: can mutations reverse during the growth of the cancer tumor? 
The short answer is no, but instead of that, like always, he came up with an eloquent explanation with a contrived example. 
I don’t want to repeat him (because those are not my words and therefore I can’t claim that I understood the argument!), so the following with all of its shortcomings is my recall of his argument.&lt;/p&gt;

&lt;h1 id=&quot;major-lessons&quot;&gt;Major Lessons&lt;/h1&gt;

&lt;p&gt;Assume a universe with only length one mutation where no deletion, insertion, etc. are possible. In other words, consider only missense/nonsense point mutations. Take the average length of a human gene to be roughly 50 kbp and assume 20000 gene exist. Therefore the probability of a mutation happening in a base pair is &lt;script type=&quot;math/tex&quot;&gt;10^{-9}&lt;/script&gt;, and this mutation should escapes every checkpoints and control mechanisms that prevent such a mutated cell to sustain and proliferate. For simplicity, we ignore the probability of a mutation “escaping through a mesh”&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; of counter cancer measure.&lt;/p&gt;

&lt;p&gt;So to reverse this mutation we need a change in the exact same spot on the DNA and we need to convert it to one of the, say, two neutral SNP allele. Such an event has the probability of &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{4} \times 10^{-18}&lt;/script&gt; which is considered zero in most branches of science.&lt;/p&gt;

&lt;p&gt;Now the question is that why in we see some tumor sub-clones which does not have certain mutations. If the whole cancer definition is “accumulation of somatic mutation” and there is no going back after a mutation, then one would expect that all sub-clones have a similar core of mutation tree and only different leaves.&lt;/p&gt;

&lt;p&gt;Adding to my confusion, Kevin showed us a recent data from CLL patients treated with Ibrutinib&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, a BTK inhibitor, and relapsed. The idea is to store blood samples without sequencing it, and when a patient relapsed go back and sequence the data to see if there is any meaningful predictor for the relapse before the actual detection of the mutation.&lt;/p&gt;

&lt;p&gt;Looking at the history of mutation allele frequency of an important genes (BTK and PLCG2), in some patients we observe an odd phenomena. We see a slow rise of those mutation over time and a sharp drop a few month before the actual relapse/resistant diagnosis. It seems PLCG2 mutation was reversing!&lt;/p&gt;

&lt;p&gt;So how should we explain this?!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://dustingmixon.wordpress.com/2014/02/08/gordons-escape-through-a-mesh-theorem/&quot;&gt;Gordon’s theorem&lt;/a&gt; on a random subspace escaping through a subset of hypersphere. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;In 2013 Ibrutinib was introduced as a &lt;a href=&quot;http://www.nejm.org/doi/full/10.1056/NEJMoa1215637&quot;&gt;targeted treatment&lt;/a&gt; for relapsed/re-factored CLL patients harboring mutations in TP53 or deletion of 17p. &lt;a href=&quot;http://www.nejm.org/doi/full/10.1056/NEJMoa1509388&quot;&gt;Two years later&lt;/a&gt;, it was suggested as an effective first line of attack for CLL. But as Kevin mentioned, I didn’t check, the relapse (and/or drug resistant) rate after treatment is high when the patients pass the two years milestones, and ironically both studied followed up patients for about 2 years and missed this major issue. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Amir Asiaee</name><email>asiaeetaheri.1@osu.edu</email></author><category term="CLL" /><category term="cancer" /><summary type="html">This came up during our lab meeting today with my great postdoc mentor Professor Kevin Coombes.</summary></entry><entry><title type="html">The Painful Part of Collaboration: Version Control and Shared Storage Spaces</title><link href="http://localhost:4000/dailyreport/gitlab-bitbucket-googledrive-Copy/" rel="alternate" type="text/html" title="The Painful Part of Collaboration: Version Control and Shared Storage Spaces" /><published>2018-01-16T00:00:00-05:00</published><updated>2018-01-16T00:00:00-05:00</updated><id>http://localhost:4000/dailyreport/gitlab-bitbucket-googledrive%20-%20Copy</id><content type="html" xml:base="http://localhost:4000/dailyreport/gitlab-bitbucket-googledrive-Copy/">&lt;h1 id=&quot;major-lessons&quot;&gt;Major Lessons&lt;/h1&gt;</content><author><name>Amir Asiaee</name><email>asiaeetaheri.1@osu.edu</email></author><category term="GitLab" /><category term="GitHub" /><category term="GoogleDrive" /><category term="VersionControl" /><summary type="html">Major Lessons</summary></entry><entry><title type="html">Indexing with Factors</title><link href="http://localhost:4000/dailyreport/r-factor-indexing/" rel="alternate" type="text/html" title="Indexing with Factors" /><published>2018-01-15T00:00:00-05:00</published><updated>2018-01-15T00:00:00-05:00</updated><id>http://localhost:4000/dailyreport/r-factor-indexing</id><content type="html" xml:base="http://localhost:4000/dailyreport/r-factor-indexing/">&lt;h1 id=&quot;major-lessons&quot;&gt;Major Lessons&lt;/h1&gt;

&lt;p&gt;I spent a cycle figuring this out:&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;Any non-numeric thing that you read from a data file is going to be a factor, i.e., categorical data.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;Factors are implemented as numerics/integers in R. So when you use them to index another construct which has row/column name as character you need to do so by &lt;code class=&quot;highlighter-rouge&quot;&gt;as.character()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a typical scenario: You read a column from a file and use it to index some construct. 
You either should read the column as string:&lt;/p&gt;
&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myDataFrame&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read.csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path/to/file.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringsAsFactors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or convert the factors using as.character before indexing another construct:&lt;/p&gt;
&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myDataFrame2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as.character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Amir Asiaee</name><email>asiaeetaheri.1@osu.edu</email></author><category term="R" /><category term="factor" /><summary type="html">Major Lessons I spent a cycle figuring this out: Any non-numeric thing that you read from a data file is going to be a factor, i.e., categorical data. Factors are implemented as numerics/integers in R. So when you use them to index another construct which has row/column name as character you need to do so by as.character(). Here is a typical scenario: You read a column from a file and use it to index some construct. You either should read the column as string: myDataFrame &amp;lt;- read.csv(&quot;path/to/file.csv&quot;, stringsAsFactors=FALSE) or convert the factors using as.character before indexing another construct: a &amp;lt;- myDataFrame2[as.character(myFactor)]</summary></entry><entry><title type="html">Introducing Pandoc</title><link href="http://localhost:4000/dailyreport/pandoc/" rel="alternate" type="text/html" title="Introducing Pandoc" /><published>2018-01-12T00:00:00-05:00</published><updated>2018-01-12T00:00:00-05:00</updated><id>http://localhost:4000/dailyreport/pandoc</id><content type="html" xml:base="http://localhost:4000/dailyreport/pandoc/">&lt;p&gt;I was trying to figure out a way to write math heavy blog posts. 
&lt;!-- more --&gt;
There are well known JavaScript libraries like MathJax and KaTex for this purpose and you just need to through in a CDN provider’s URL in a script tag and start using the special characters like double $.&lt;/p&gt;

&lt;p&gt;I had two problems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I wanted to use &lt;a href=&quot;&quot;&gt;KaTex&lt;/a&gt; which is much faster than MathJax.&lt;/li&gt;
  &lt;li&gt;I wanted to be able to use my latex macro file (gradually populated during my Ph.D.) to write math-heavy blogs faster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;major-lessons&quot;&gt;Major Lessons&lt;/h1&gt;
&lt;p&gt;Resolving the first issue needs another post. 
For achieving the second goal I couldn’t find MarkDown based solution and the only way around that I found is due to steps of this &lt;a href=&quot;http://shuvomoy.github.io/blog/non-technical/2016/01/16/Writing-math-heavy-blogs.html&quot;&gt;post&lt;/a&gt; which basically uses Pandoc to convert latex (with macros) to HTML files directly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt; seems to be a great tool with reliable performance in converting between any document types. My plan is to use it to convert between MarkDown and Beamer for my future presentation. It would be fun to have a web friendly version of presentation along with the PDF version.&lt;/p&gt;

&lt;h1 id=&quot;minor-lessons&quot;&gt;Minor Lessons&lt;/h1&gt;
&lt;p&gt;I tried to use it for generating content of README.md files of a project on GitLab, but unfortunately it didn’t work. The problem is with the non-standard MarkDown that GitLab uses known as GitLab Flavored MarkDown (GFM). Pandoc does not support GitLab GFM and ironically reserved the &lt;code class=&quot;highlighter-rouge&quot;&gt;--gfm&lt;/code&gt; option to convert to &lt;strong&gt;GitHub&lt;/strong&gt; flavored MarkDown! Someday, someone should standardize the heap of MarkDown languages for a greater good!&lt;/p&gt;</content><author><name>Amir Asiaee</name><email>asiaeetaheri.1@osu.edu</email></author><category term="R" /><category term="factor" /><summary type="html">I was trying to figure out a way to write math heavy blog posts. There are well known JavaScript libraries like MathJax and KaTex for this purpose and you just need to through in a CDN provider’s URL in a script tag and start using the special characters like double $. I had two problems: I wanted to use KaTex which is much faster than MathJax. I wanted to be able to use my latex macro file (gradually populated during my Ph.D.) to write math-heavy blogs faster. Major Lessons Resolving the first issue needs another post. For achieving the second goal I couldn’t find MarkDown based solution and the only way around that I found is due to steps of this post which basically uses Pandoc to convert latex (with macros) to HTML files directly. Pandoc seems to be a great tool with reliable performance in converting between any document types. My plan is to use it to convert between MarkDown and Beamer for my future presentation. It would be fun to have a web friendly version of presentation along with the PDF version. Minor Lessons I tried to use it for generating content of README.md files of a project on GitLab, but unfortunately it didn’t work. The problem is with the non-standard MarkDown that GitLab uses known as GitLab Flavored MarkDown (GFM). Pandoc does not support GitLab GFM and ironically reserved the --gfm option to convert to GitHub flavored MarkDown! Someday, someone should standardize the heap of MarkDown languages for a greater good!</summary></entry><entry><title type="html">Merging Data Frames in R by Row Names</title><link href="http://localhost:4000/dailyreport/r-merge/" rel="alternate" type="text/html" title="Merging Data Frames in R by Row Names" /><published>2018-01-11T00:00:00-05:00</published><updated>2018-01-11T00:00:00-05:00</updated><id>http://localhost:4000/dailyreport/r-merge</id><content type="html" xml:base="http://localhost:4000/dailyreport/r-merge/">&lt;h1 id=&quot;major-lessons&quot;&gt;Major Lessons&lt;/h1&gt;

&lt;h2 id=&quot;merge-data-frames&quot;&gt;Merge Data Frames&lt;/h2&gt;

&lt;p&gt;I needed to concatenate two data frames which had row names. The regular method is &lt;code class=&quot;highlighter-rouge&quot;&gt;cbind&lt;/code&gt; which just put the data frames beside each other ignoring the row names. So, if you have different row orders, you get the wrong answer. The way around it is the &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; function which accepts a &lt;code class=&quot;highlighter-rouge&quot;&gt;by=&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;Merge is a binary operator which accepts only data frames. So if you have used operations like transpose which gave you matrices, you need to read them as data frame into the merge using &lt;code class=&quot;highlighter-rouge&quot;&gt;merge(as.dataframe(t(A)), as.dataframe(t(B)))&lt;/code&gt;. There are more useful arguments like &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;suffixes&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;amir&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mom&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eli&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dad&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;three&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;four&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as.data.frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as.data.frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;row.names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suffixes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-integer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Row.names&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;three&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;four&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eli&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dad&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you see, the major problem with merge is that it leaves the merge/joint key as a column in the data.frame. I assume that this is what we want if the merge key is some feature (column) in the data frames, but when you use row names as the merge key, that generates an extra column which you need to remove or put back as the row names:&lt;/p&gt;
&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row.names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Row.names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Row.names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;three&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;four&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eli&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dad&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Amir Asiaee</name><email>asiaeetaheri.1@osu.edu</email></author><category term="R" /><category term="data.frame" /><summary type="html">Major Lessons Merge Data Frames I needed to concatenate two data frames which had row names. The regular method is cbind which just put the data frames beside each other ignoring the row names. So, if you have different row orders, you get the wrong answer. The way around it is the merge function which accepts a by= argument. Merge is a binary operator which accepts only data frames. So if you have used operations like transpose which gave you matrices, you need to read them as data frame into the merge using merge(as.dataframe(t(A)), as.dataframe(t(B))). There are more useful arguments like sort and suffixes: &amp;gt; A one two second &quot;amir&quot; &quot;mom&quot; first &quot;eli&quot; &quot;dad&quot; &amp;gt; B one two three four five first 1 3 5 7 9 second 2 4 6 8 10 &amp;gt; C &amp;lt;- merge(as.data.frame(B), as.data.frame(B), by=&quot;row.names&quot;, sort=TRUE, suffixes = c(&quot;-string&quot;, &quot;-integer&quot;)) &amp;gt; C Row.names one-string two-string one-integer two-integer three four five 1 first eli dad 1 3 5 7 9 2 second amir mom 2 4 6 8 10 As you see, the major problem with merge is that it leaves the merge/joint key as a column in the data.frame. I assume that this is what we want if the merge key is some feature (column) in the data frames, but when you use row names as the merge key, that generates an extra column which you need to remove or put back as the row names: &amp;gt; row.names(C) &amp;lt;- C[[&quot;Row.names&quot;]] &amp;gt; C[[&quot;Row.names&quot;]] &amp;lt;- NULL &amp;gt; C one-string two-string one-integer two-integer three four five 1 eli dad 1 3 5 7 9 2 amir mom 2 4 6 8 10</summary></entry><entry><title type="html">Indexing Data Frames in R</title><link href="http://localhost:4000/dailyreport/r-indexing/" rel="alternate" type="text/html" title="Indexing Data Frames in R" /><published>2018-01-10T00:00:00-05:00</published><updated>2018-01-10T00:00:00-05:00</updated><id>http://localhost:4000/dailyreport/r-indexing</id><content type="html" xml:base="http://localhost:4000/dailyreport/r-indexing/">&lt;h1 id=&quot;major-lessons&quot;&gt;Major Lessons&lt;/h1&gt;

&lt;h2 id=&quot;what-is-a-data-frame&quot;&gt;What is a Data Frame?&lt;/h2&gt;
&lt;p&gt;Compared to intellectual math challenges, technological issues are very mind scratching for me. After understanding/solving a math problem I feel great, but it is entirely different when I find a bug in my code, I feel dumb. I mean, you can spend a lot of time to be able to do a simple thing, or you may waste a day finding a small bug in your program. And that is the time when I have the most mixed feeling: happy about the achievement and very very angry that my day is gone to fix a single piece.&lt;/p&gt;

&lt;p&gt;Recently, I started to learn R, the programming language for statisticians. Unlike other programming languages that I coded in, R has several ways of representing and indexing the abstract object that I call &lt;em&gt;table&lt;/em&gt;. A table can be &lt;strong&gt;matrix&lt;/strong&gt; construct or &lt;strong&gt;data.frame&lt;/strong&gt; is R. Data frames are more flexible and are the main point of working with R. You can easily have different data types like factor, numeric, characters in a data frame, and index them with column and row names or numeric indices.&lt;/p&gt;

&lt;p&gt;It seems that data frame is implemented as a particular &lt;strong&gt;list of lists&lt;/strong&gt; object. The actual list has a list of columns where each column is a list itself. The only constraint is that the columns should have the same length. 
This fact became clear when I did this:&lt;/p&gt;
&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data.frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data.frame&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So at first, I found it less confusing to index the data frame as a list of lists using the regular single and double bracket. 
For the ith column as a list (data.frame) one can do &lt;code class=&quot;highlighter-rouge&quot;&gt;d[i]&lt;/code&gt;, while to view it as the actual type of elements, say numeric, we can do &lt;code class=&quot;highlighter-rouge&quot;&gt;d[[i]]&lt;/code&gt; and then proceed with the row indexing by &lt;code class=&quot;highlighter-rouge&quot;&gt;d[[i]][j]&lt;/code&gt;, noting that &lt;code class=&quot;highlighter-rouge&quot;&gt;d[i][j]&lt;/code&gt; is wrong and &lt;code class=&quot;highlighter-rouge&quot;&gt;d[[i]][[j]]&lt;/code&gt; is correct but not efficient.&lt;br /&gt;
After spending another round cleaning up the code, I got it to the more traditional form of indexing &lt;code class=&quot;highlighter-rouge&quot;&gt;d[i,j]&lt;/code&gt; without any problem.&lt;/p&gt;

&lt;h1 id=&quot;minor-lessons&quot;&gt;Minor Lessons&lt;/h1&gt;

&lt;h2 id=&quot;spell-checker-plugin-for-notepad&quot;&gt;Spell Checker Plugin for Notepad++&lt;/h2&gt;

&lt;p&gt;I started to write most of my notes in Notepad++. The auto-complete feature is very convenient, but there is no spell checking by default. I had to install it as a plugin. You can download plugins from &lt;a href=&quot;http://docs.notepad-plus-plus.org/index.php/Plugin_Central&quot;&gt;here&lt;/a&gt; and put it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\Notepad++\plugins&lt;/code&gt; folder and then import it from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Setting&lt;/code&gt;. I needed to find x64 compatible because the x32 ones didn’t work. I finally ended up using &lt;a href=&quot;https://github.com/Predelnik/DSpellCheck/releases/tag/1.2.14.2&quot;&gt;DSpellCheck&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;string-concatenation-in-r&quot;&gt;String Concatenation in R&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;paste(&quot;str1&quot;, ...)&lt;/code&gt; does the job but the default separator is space to have actual concatenation you need &lt;code class=&quot;highlighter-rouge&quot;&gt;sep=&quot;&quot;&lt;/code&gt; argument.&lt;/p&gt;

&lt;h2 id=&quot;data-frames-with-matrix-operations&quot;&gt;Data frames with matrix operations&lt;/h2&gt;
&lt;p&gt;Interestingly, some matrix operations like transpose accept data frame but spit out &lt;code class=&quot;highlighter-rouge&quot;&gt;matrix&lt;/code&gt; class (Again I think the matrix class is implemented as an array &lt;code class=&quot;highlighter-rouge&quot;&gt;c()&lt;/code&gt; with two dimensions. So, the  &lt;code class=&quot;highlighter-rouge&quot;&gt;class(A)&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;matrix&lt;/code&gt; but the &lt;code class=&quot;highlighter-rouge&quot;&gt;mode(A)&lt;/code&gt; is the mode of constituent elements of the corresponding vector.&lt;/p&gt;</content><author><name>Amir Asiaee</name><email>asiaeetaheri.1@osu.edu</email></author><category term="R" /><category term="data.frame" /><summary type="html">Major Lessons What is a Data Frame? Compared to intellectual math challenges, technological issues are very mind scratching for me. After understanding/solving a math problem I feel great, but it is entirely different when I find a bug in my code, I feel dumb. I mean, you can spend a lot of time to be able to do a simple thing, or you may waste a day finding a small bug in your program. And that is the time when I have the most mixed feeling: happy about the achievement and very very angry that my day is gone to fix a single piece. Recently, I started to learn R, the programming language for statisticians. Unlike other programming languages that I coded in, R has several ways of representing and indexing the abstract object that I call table. A table can be matrix construct or data.frame is R. Data frames are more flexible and are the main point of working with R. You can easily have different data types like factor, numeric, characters in a data frame, and index them with column and row names or numeric indices. It seems that data frame is implemented as a particular list of lists object. The actual list has a list of columns where each column is a list itself. The only constraint is that the columns should have the same length. This fact became clear when I did this: &amp;gt; d &amp;lt;- data.frame() &amp;gt; class(d) [1] &quot;data.frame&quot; &amp;gt; mode(d) [1] &quot;list&quot; So at first, I found it less confusing to index the data frame as a list of lists using the regular single and double bracket. For the ith column as a list (data.frame) one can do d[i], while to view it as the actual type of elements, say numeric, we can do d[[i]] and then proceed with the row indexing by d[[i]][j], noting that d[i][j] is wrong and d[[i]][[j]] is correct but not efficient. After spending another round cleaning up the code, I got it to the more traditional form of indexing d[i,j] without any problem. Minor Lessons Spell Checker Plugin for Notepad++ I started to write most of my notes in Notepad++. The auto-complete feature is very convenient, but there is no spell checking by default. I had to install it as a plugin. You can download plugins from here and put it in the C:\Program Files\Notepad++\plugins folder and then import it from the Setting. I needed to find x64 compatible because the x32 ones didn’t work. I finally ended up using DSpellCheck. String Concatenation in R paste(&quot;str1&quot;, ...) does the job but the default separator is space to have actual concatenation you need sep=&quot;&quot; argument. Data frames with matrix operations Interestingly, some matrix operations like transpose accept data frame but spit out matrix class (Again I think the matrix class is implemented as an array c() with two dimensions. So, the class(A) is matrix but the mode(A) is the mode of constituent elements of the corresponding vector.</summary></entry></feed>